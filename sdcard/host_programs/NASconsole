#!/usr/bin/perl
#
# This is the console interface for nascom_sdcard. Run it on a PC and connect a USB
# cable from the PC to the Arduino USB connector on the nascom_sdcard board.
# You will now be able to transfer files to and from the SDcard. Use "help" for
# commands/syntax.
#
# https://github.com/nealcrook/nascom
#
################################################################################
# Serial comms and threading was inspired by material from here:
# https://stackoverflow.com/questions/11365111/newbie-perl-serial-programming
# https://stackoverflow.com/questions/28477868/perl-polling-a-file-handle
#
################################################################################
# TODO
# - nicer formatting here
# - allow format conversion on-the-fly (using nascon)
# - "idle" flag from thread to make CLI print a return/prompt
# - "SDcard not present" error is not detected
#
################################################################################

use strict;
use warnings;
use threads;
use threads::shared;
use Device::SerialPort;  ## need to install this from CPAN

die "Usage: ./NASconsole /dev/ttyUSB1\n" if !defined $ARGV[0];

my $device = $ARGV[0];
my $PortObj=Device::SerialPort->new($device) || die "ERROR cannot open $device\n";

$PortObj->databits(8);
$PortObj->baudrate(115200);
$PortObj->parity("none");
$PortObj->stopbits(1);
$PortObj->read_char_time(0);     # don't wait for each character
$PortObj->read_const_time(1000); # 1 second per unfulfilled "read" call

################################################################################
# Data that is shared between the command-line interface here (which is
# responsible for sending data to NAScas) and the thread which is responsible
# for reading data from NAScas.
#
# 0: line-based echo
# 1: command startup (file read or EEROM write or EEPROM read)
# 2: in read, line-based, get length
#    ^- serial_in_thread does transition from 1 to 2 in response to Ack 6
# 3: in read, character-based, save data to file.
# 4: in write, flow-controlling write data from console
# 5: in EEPROM write (programming) cycle
my $state        :shared;
$state = 0;
# read data byte coming back from serial thread
my $rdbyte       :shared;
# file name in local filesystem -- used by thread in state=2
my $local_name   :shared;
# increment each time NAScas requests 512 bytes during a write command
my $gimme512     :shared;
$gimme512=0;

# remote (SDcard) file name
my $remote_name;

# Size of profile record: 5 bytes + 4 profile entries of 56 bytes each
my $PRECSIZE = 5 + 4*56;

# Handle Rx from NAScas
threads->create(\&serial_in_thread);

# Signal-handling for main program (CLI)
$SIG{HUP} = sub {print "INFO: received a SIGHUP. Not currently handled";};

# Handle command-line and Tx to NAScas
while (1) {
    print "NASconsole: ";
    my $cmd = <STDIN>;
    chomp $cmd;
    $cmd =~ s/^\s+//;
    next if $cmd eq '';

    my @bit = split " ", $cmd;
    $bit[0] = uc $bit[0];

    if ($bit[0] =~ /^DIR/) {
        # Directory. Response comes asynchronously.
        $PortObj->write("D\r");
    }
    elsif ($bit[0] =~ /^ERASE/) {
        # Erase. Expect 1 argument. Response comes asynchronously.
        if (scalar @bit == 2) {
            $remote_name = uc $bit[1];
        }
        else {
            print "ERROR wrong number of arguments to erase command\n";
            next;
        }
        if (!legal_msdos_name($remote_name)) {
            print "ERROR $remote_name is not a legal MSDOS 8.3 filename\n";
            next;
        }
        $PortObj->write("E $remote_name \r");
    }
    elsif ($bit[0] =~ /^WRITE/) {
        # write file. Expect 1 or 2 arguments
        $local_name = $bit[1];
        if (scalar @bit == 3) {
            $remote_name = uc $bit[2];
        }
        elsif (scalar @bit == 2) {
            $remote_name = uc $local_name;
        }
        else {
            print "ERROR wrong number of arguments to write command\n";
            next;
        }
        if (!legal_msdos_name($remote_name)) {
            print "ERROR $remote_name is not a legal MSDOS 8.3 filename\n";
            next;
        }

        # ignore/work-around mismatched case in $local_name
        if (not -e $local_name){
            if (-e uc($local_name)) {
                $local_name = uc $local_name;
                print "INFO Using local file $local_name instead\n";
            }
            elsif (-e lc($local_name)) {
                $local_name = lc $local_name;
                print "INFO Using local file $local_name instead\n";
            }
            # if neither work the open will fail.. we tried our hardest!
        }

        if (open WFILE, $local_name) {
            my $bytes = -s $local_name;

            $gimme512 = 0;
            $PortObj->write("W $remote_name $bytes \r");
            my $byte;
            my $count = 0;

            my $response = 0;
            my $bytes_this_time = 0;

            while (read WFILE, $byte, 1) {
                if ($bytes_this_time == 0) {
                    # wait for flow control
                    ##print "Start wait with $gimme512 and $response and count $count\n";
                    while ($gimme512 == $response) {
                    }
                    $response = $gimme512;
                    ##print "Send next chunk\n";
                }
                $bytes_this_time = ($bytes_this_time + 1) % 512;

                $PortObj->write($byte);
                $count++;
            }
            close WFILE;
            print "\nINFO Wrote $count bytes to $remote_name -- file had $bytes bytes\n";
        }
        else {
            print "ERROR Could not open local file $local_name\n";
        }
    }
    elsif ($bit[0] =~ /^READ/) {
        # read file. Expect 1 or 2 arguments
        if (scalar @bit == 3) {
            $local_name = $bit[2];
            $remote_name = uc $bit[1];
        }
        elsif (scalar @bit == 2) {
            $local_name = uc $bit[1];
            $remote_name = uc $bit[1];
        }
        else {
            print "ERROR Wrong number of arguments to read command\n";
            next;
        }
        if (!legal_msdos_name($remote_name)) {
            print "ERROR $remote_name is not a legal MSDOS 8.3 filename\n";
            next;
        }
        # tell thread to expect incoming data then issue command
        $state = 1;
        $PortObj->write("R $remote_name \r");

        # wait for thread to signal completion of incoming data
        while ($state != 0) {
            sleep(1);
        }
    }
    elsif ($bit[0] =~ /^PUT/) { # put address data (values in hex)
        # this raw access is just for testing/hacking. Use WRPROFILE
        $state = 1;
        $PortObj->write("P $bit[1] $bit[2] \r");
    }
    elsif ($bit[0] =~ /^WRPROFILE/) {
        # Create and program (to EEPROM) the default profile settings
        my $pref = gen_default_profile();
        foreach my $addr (0..$#$pref) {
            $state = 1;
            my $cmd = sprintf("P %x %x \r", $addr, $pref->[$addr]);
            $PortObj->write($cmd);
            while ($state != 0) {
            }
            print ".";
        }
        print "\n";
    }
    elsif ($bit[0] =~ /^GET/) { # get address (value in hex)
        # this raw access is just for testing/hacking. Use RDPROFILE
        # tell thread to expect incoming data then issue command
        $state = 1;
        $PortObj->write("G $bit[1] \r");
        while ($state != 0) {
        }
        printf "0x%02x\n", $rdbyte;
    }
    elsif ($bit[0] =~ /^RDPROFILE/) {
        # Read the profile from EEPROM and  report it
        my @prof;

        foreach my $addr (0..$PRECSIZE-1) {
            # tell thread to expect incoming data then issue command
            $state = 1;
            my $cmd = sprintf("G %x \r", $addr);
            $PortObj->write($cmd);
            while ($state != 0) {
            }
            push @prof, $rdbyte;
        }
        report_profile(\@prof);
    }

    elsif ($bit[0] =~ /^QUIT/) {
        foreach my $thr ( threads->list ) {
            $thr->kill('INT')->join();
        }
        $PortObj->close();
        exit;
    }
    elsif ($bit[0] =~ /^HELP/) {
        help_msg();
    }
    else {
        print "ERROR No such command -- try 'help'\n";
    }
}


# In general, just listens for debug messages and reports them.
# When the console issues a command, it also sets a flag to indicate
# the response expected, which is detected here and used to make this
# routine handle the response in a pseudo-synchronous way
sub serial_in_thread {
    # mechanism that allows the main program's "quit" command to terminate this
    # thread so that the program can exit gracefully.
    $SIG{INT} = sub {threads->exit()};

    # Convert status messages from NAScas into something useful
    # (some of these will never be printed)
    my %messages = (
        'Ack 0' =>  'INFO Directory in progress',
        'Ack 1' => 'ERROR No SDcard present',
        'Ack 2' =>  'INFO Erase completed successfully',
        'Ack 3' => 'ERROR Erase failed: bad filename or file not found',
        'Ack 4' =>  'INFO Write accepted. Data transfer starting.',
        'Ack 5' => 'ERROR Write failed: bad filename or file not found',
        'Ack 6' =>  'INFO Read in progress',
        'Ack 7' => 'ERROR Read failed: bad filename or file not found',
        'Ack 8' =>  'INFO Write completed successfully',
        'Ack 9' => 'ERROR Command not recognised',
        'Ack 10'=>  'INFO EEPROM write completed successfully',
        'Ack 12' => 'INFO EEPROM read completed successfully',
        );

    my $STALL_DEFAULT=10; # how many seconds to wait for new input
    my $timeout=$STALL_DEFAULT;

    my $buffer="";

    my $rd_bytes_expected;
    my $rd_bytes_actual;

    # turn off buffering to allow transfer progress dots
    $| = 1;

##    while ($timeout>0) {
    while (1) {
        my ($count,$saw)=$PortObj->read(1); # will read _up to_ 255 chars
        if (!defined $count) {
            print "ERROR Lost contact with target. USB disconnected?\n";
            # not very polite, but better than spewing out messages forever.
            exit;
        }

        if ($count > 0) {
            #print "Debug: got $saw state=$state $rd_bytes_expected $rd_bytes_actual\n";
            if ($state == 3) {
                print RFILE $saw;
                $rd_bytes_actual += length($saw);
                print "." if (($rd_bytes_actual % 512) == 0);
                if ($rd_bytes_actual == $rd_bytes_expected) {
                    printf "INFO read of file as %s; received %d bytes\n", $local_name, $rd_bytes_actual;
                    $state = 0;
                    close RFILE;
                }
            }
            elsif ($state == 4) { # file write
                # each . signals a desire for 512 more characters
                if ($saw eq ".") {
                    $gimme512++;
                    print $saw;
                    ##print "Received . for next 512 bytes\n";
                }
                elsif ($saw eq "A") {
                    # first letter of "Ack 8" signalling end of write
                    # go back to normal state, leaving this in the buffer
                    $buffer.= $saw;
                    $state = 0;
                }
                else {
                    print "ERROR Internal error: expected . got: $saw\n";
                }
            }
            else {
                # Line-based processing
                $buffer.= $saw;
                if ($buffer =~ /\r\n$/) {
                    # Found complete line
                    if ($buffer =~ /^Ack 6\r\n$/) {
                        # Start of Read.
                        open RFILE, ">$local_name";
                        $state = 2;
                    }
                    elsif ($buffer =~ /^Ack 10\r\n$/) {
                        # EEPROM program done.
                        $state = 0;
                    }
                    elsif ($buffer =~ /^([0-9A-f]{1,2})Ack 12\r\n$/) {
                        # EEPROM Byte read. Can be 1 or 2 hex characters
                        $rdbyte = hex($1);
                        $state = 0;
                    }
                    elsif ($buffer =~ /^Ack 4\r\n$/) {
                        # Ready for write data, doing flow control.
                        $state = 4;
                    }
                    elsif ($buffer =~ /^Ack 7\r\n$/) {
                        # Read failed. Report error and reset state
                        print "$messages{'Ack 7'}\n";
                        $state = 0;
                    }
                    elsif ($state == 2) {
                        # this is the size of the file to be read
                        $rd_bytes_expected = $buffer;
                        $rd_bytes_actual = 0;
                        if ($rd_bytes_expected == 0) {
                            # special case of zero-byte file: we're
                            # already done.
                            printf "INFO read of file as %s; received %d bytes\n", $local_name, $rd_bytes_actual;
                            $state = 0;
                            close RFILE;
                        }
                        else {
                            $state = 3;
                        }
                    }
                    else {
                        $buffer =~ s/\r\n//;
                        if (exists $messages{$buffer}) {
                            print "$messages{$buffer}\n";
                        }
                        else {
                            print "$buffer\n";
                        }
                    }
                    $buffer = "";
                }
            }
        }
        else {
            $timeout--;
        }
    }

    if ($timeout==0) {
        die "Waited $STALL_DEFAULT seconds and never saw what I wanted\n";
    }
}


# return 1 if name is 8.3 using letters A-Z 0-9 _ -
# minimum prefix length is 1 character. Minimum extension length is 1 character
sub legal_msdos_name {
    my $name = $_[0];
    if ($name =~ /[A-Z0-9\_\-]{1,8}\.[A-Z0-9\_\-]{1,3}/) {
        return 1;
    }
    else {
        return 0;
    }
}


# Create a default profile setup for storage in EEPROM; return reference to an
# array containing the EEPROM data. This also acts as a definition of the format.
sub gen_default_profile {
    my @record;

    # Byte sequence
    $record[0] = ord("N"); # Magic to suggest a valid record
    $record[1] = ord("A"); # "
    $record[2] = ord("S"); # "
    $record[3] = 0;        # Default profile selects PolyDos
    $record[4] = 0;        # checksum; bytes sum to 0.
    # PolyDos                                                                        TPS  TRK 1ST SIZ
    add_profile(\@record, "POLYDOS0.DSK","POLYDOS1.DSK","POLYDOS2.DSK","POLYDOS3.DSK",36, 35, 0, 2); # 256-byte sectors
    # NAS-DOS
    add_profile(\@record, "NASDOS0.DSK", "NASDOS1.DSK", "NASDOS2.DSK", "NASDOS3.DSK", 32, 80, 1, 2); # 256-byte sectors
    # CP/M
    add_profile(\@record, "CPM0.DSK",    "CPM1.DSK",    "CPM2.DSK",    "CPM3.DSK",    10, 77, 1, 4); # 512-byte sectors
    # BootMenu
    add_profile(\@record, "SDBOOT0.DSK", "SDBOOT1.DSK", "SDBOOT2.DSK", "SDBOOT3.DSK", 36, 35, 0, 4); # 512-byte sectors

    # calculate and insert checksum
    my $csum = 0;
    foreach my $byte (@record) {
        $csum += $byte;
    }
    $record[4] = 0xff & (($csum^0xff) + 1);
    return \@record;
}

sub add_profile {
    my $ref = $_[0];

    # insert 4 file names, each null-terminated in a 13-byte field
    for my $name (1..4) {
        for my $i (0..12) {
            no warnings 'substr';
            if (defined substr($_[$name], $i, 1)) {
                push @$ref, ord(substr ($_[$name], $i, 1));
            }
            else {
                push @$ref, 0;
            }
        }
    }
    push @$ref, $_[5]; # sectors per track
    push @$ref, $_[6]; # number of tracks
    push @$ref, $_[7]; # first sector
    push @$ref, $_[8]; # number of 128-byte chunks per sector
}


# report profile record represented by the array of numeric byte values in @{$_[0]}
sub report_profile {
    my $ref = $_[0];

    my $magic = ($ref->[0] == ord('N')) && ($ref->[1] == ord('A')) && ($ref->[2] == ord('S'));
    my $csum = 0;
    foreach my $char (@$ref) {
        $csum = $csum + $char;
    }

    if ((($csum & 0xff) == 0) && $magic) {
        for my $prof (0..3) {
            if ($ref->[3] == $prof) {
                print "* Profile $prof: "; # active profile
            }
            else {
                print "  Profile $prof: ";
            }
            for my $file (0..3) {
                for my $i (0..12) {
                    my $val = $ref->[5 + 56*$prof + 13*$file + $i];
                    if ($val == 0) {
                        print " ";
                    }
                    else {
                        print chr($val);
                    }
                }
                print "  ";
            }
            my $i = 5 + 56*$prof + 13*4;
            printf "Tracks/Sector: %2d  Tracks: %2d  First track: %d  Sector size: %3d\n",
                $ref->[$i], $ref->[$i+1], $ref->[$i+2], $ref->[$i+3]*128;
        }
    }
    else {
        print "Profile not found or invalid. Hex dump follows:\n";
        for my $i (0..$PRECSIZE-1) {
            if ($i % 8 == 0) {
                if ($i !=0) {
                    printf "\n";
                }
                printf "%04x ", $i;
            }
            printf "%02x ", $ref->[$i];
        }
        printf "\n";
    }
}

sub help_msg {
    print <<EOF
Console for NAScas.

Usage:

./NASconsole /dev/ttyUSB0

Reports asynchronous status/debug messages from NAScas, and supports the following
commands:

dir                      - Directory of SDcard
                           Error if SDcard not present

erase filename           - Erase specified file from SDcard.
                           Error if SDcard not present
                           Error if filename is not a MSDOS 8.3 name
                           Error if filename does not exist

write filename           - write local file filename to SDcard. filename is valid MSDOS 8.3 name
                           Error if SDcard not present
                           Error if filename is not a MSDOS 8.3 name
                           Error if filename does not exist on local filesystem

write lfilename filename - write local file lfilename to SDcard as the name filename; filename is valid MSDOS 8.3 name
                           Error if SDcard not present
                           Error if filename is not a MSDOS 8.3 name
                           Error if lfilename does not exist on local filesystem

read filename            - read file filename from SDcard and save locally. filename is valid MSDOS 8.3 name
                           Error if SDcard not present
                           Error if filename is not a MSDOS 8.3 name
                           Error if filename does not exist on SDcard

read filename lfilename  - read file filename from SDcard and save locally as lfilename; filename is valid MSDOS 8.3 name
                           Error if SDcard not present
                           Error if filename is not a MSDOS 8.3 name
                           Error if filename does not exist on SDcard

wrprofile                - write default profile to EEPROM

rdprofile                - read and report profile stored in EEPROM

put a d                  - write to EEPROM location a with byte value d (a and d are in hex)

get a                    - read EEPROM location a and report byte value (a is in hex)

help                     - this is it

quit                     - leave NASconsole

When you start NASconsole, it resets the nascom_sdcard hardware; this is an Arduino design feature

For convenience, whatever is specified as "filename" is converted automatically to upper case; case
is only important for "lfilename" (for write: if "lfilename" is not found, try to use the upper-case
equivalent then the lower-case equivalent before giving up).

The NASconsole command loop will only respond to one thing at a time.

EOF
}
