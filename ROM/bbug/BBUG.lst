# File BBUG.asm
0000			;	title	'Nascom monitor BBUG'  
0000			; **********************************  
0000			; *** Nascom 1 monitor BBUG	 ***  
0000			; **********************************  
0000			; BBUG was a 2Kbyte monitor in which the first  
0000			; 1Kbyte was a patched near-copy of NASBUG T2.  
0000			; This source code has been re-created by  
0000			; disassembling a BBUG ROM dump, making the  
0000			; first 1Kbyte match NASBUG T2 (and  
0000			; highlighting the parts that are changed)  
0000			; then using the source listing in the  
0000			; BBUG documentation to get label names  
0000			; and comments for the remaining code.  
0000			; foofoobedoo@gmail.com Feb 2020/Feb 2021  
0000			  
0000				org	0  
0000			crtram: equ	0800h	; start of video ram  
0000			bs:	equ	1dh  
0000			ff:	equ	1eh  
0000			cr:	equ	1fh  
0000			cur:	equ	5fh  
0000			line:	equ	0b4ah  
0000			curlin: equ	0b8ah  
0000			  
0000			; initialise stack pointer and RAM  
0000 31 33 0c		start:	ld	sp,stack  
0003 21 00 0c			ld	hl,ramz  
0006 06 15			ld	b,rame-ramz  
0008 36 00		l1:	ld	(hl),0  
000a 23				inc	hl  
000b 10 fb			djnz	l1  
000d			  
000d			; set reflections  
000d 21 28 01			ld	hl,initt  
0010 11 3d 0c			ld	de,initr  
0013 01 13 00			ld	bc,inite-initt  
0016 ed b0			ldir  
0018			  
0018			; initialise CRT  
0018 3e 1e			ld	a,ff  
001a cd 3b 01			call	crt  
001d c3 59 03			jp	strt0  
0020			  
0020			; breakpoint restart  
0020 e3			rst20:	ex	(sp),hl  
0021 2b				dec	hl  
0022 e3				ex	(sp),hl  
0023 c3 05 03			jp	trap  
0026 00				nop  
0027 00				nop  
0028			  
0028			; RST 5 = print following string, terminated by 00  
0028 e3			prs:	ex	(sp),hl  
0029 7e			prs1:	ld	a,(hl)  
002a 23				inc	hl  
002b b7				or	a  
002c 28 05			jr	z,l2  
002e cd 4a 0c			call	_crt  
0031 18 f6			jr	prs1  
0033 e3			l2:	ex	(sp),hl  
0034 c9				ret  
0035			  
0035			; keyboard debounce delay routine  
0035 af			kdel:	xor	a  
0036 f5			kdel1:	push	af  
0037 f1				pop	af  
0038 f5				push	af  
0039 f1				pop	af  
003a 3d				dec	a  
003b 20 f9			jr	nz,kdel1  
003d c9				ret  
003e			  
003e			; read a char from keyboard or uart (first come first served)  
003e cd 4d 0c		chin:	call	_kbd  
0041 d8				ret	c  
0042 db 02			in	a,(2)  
0044 17				rla  
0045 30 f7			jr	nc,chin  
0047 db 01			in	a,(1)  
0049 c9				ret  
004a			  
004a			; set & reset a bit in I/O port 0  
004a f5			flpflp:	push	af  
004b cd 53 00			call	flip  
004e f1				pop	af  
004f 18 02			jr	flip  
0051			  
0051			; start or stop motor  
0051 3e 10		motflp:	ld	a,10h	; bit 4  
0053			  
0053			; flip a bit in port 0  
0053 e5			flip:	push	hl  
0054 21 00 0c			ld	hl,port0  
0057 ae				xor	(hl)  
0058 d3 00			out	(0),a  
005a 77				ld	(hl),a  
005b e1				pop	hl  
005c c9				ret  
005d			  
005d			; put character out thru UART, and wait till sent  
005d d3 01		slrout:	out	(1),a  
005f db 02		l3:	in	a,(2)  
0061 87				add	a,a  
0062 f8				ret	m  
0063 18 fa			jr	l3  
0065			  
0065 00				nop  
0066			  
0066			; NMI vector  
0066 c3 47 0c			jp	_nmi  
0069			  
0069			; routine to read from keyboard  
0069			;	carry is set if a char. is available  
0069			;	the standard ASCII code for the char is returned in A  
0069			;	EXCEPT for the following chars  
0069			;		BS= 1DH	 backspace  
0069			;		CR= 1EH	 carriage return (=newline)  
0069			;		FF= 1FH	 form feed =clear screen  
0069 c5			kbd:	push	bc  
006a d5				push	de  
006b e5				push	hl  
006c 3e 02			ld	a,2	; bit 1  
006e cd 4a 00			call	flpflp  
0071 21 01 0c			ld	hl,kmap  
0074 db 00			in	a,(0)  
0076 2f				cpl  
0077 77				ld	(hl),a  
0078 06 08			ld	b,8  
007a 3e 01		ksc1:	ld	a,1	; bit 0  
007c cd 4a 00			call	flpflp  
007f 23				inc	hl  
0080 db 00			in	a,(0)  
0082 2f				cpl  
0083 57				ld	d,a  
0084 ae				xor	(hl)  
0085 20 07			jr	nz,ksc2  
0087 10 f1		ksc1a:	djnz	ksc1  
0089 b7			ksc8:	or	a  
008a c3 8a 04		ksc9:	jp	ekey  
008d 00				nop  
008e cd 35 00		ksc2:	call	kdel  
0091 db 00			in	a,(0)  
0093 2f				cpl  
0094 5f				ld	e,a  
0095 7a				ld	a,d  
0096 ae				xor	(hl)  
0097 0e ff			ld	c,-1  
0099 16 00			ld	d,0  
009b 37				scf  
009c cb 12		l4:	rl	d  
009e 0c				inc	c  
009f 1f				rra  
00a0 30 fa			jr	nc,l4  
00a2 7a				ld	a,d  
00a3 a3				and	e  
00a4 5f				ld	e,a  
00a5 7e				ld	a,(hl)  
00a6 a2				and	d  
00a7 bb				cp	e  
00a8 28 dd			jr	z,ksc1a  
00aa 7e				ld	a,(hl)  
00ab aa				xor	d  
00ac 77				ld	(hl),a  
00ad 7b				ld	a,e  
00ae b7				or	a  
00af 28 d6			jr	z,ksc1a  
00b1 3a 09 0c			ld	a,(kmap+8) ; BBUG "list of modifications" shows (kmap) but opcodes address kmap+8  
00b4 e6 10			and	10h	; bit 4  
00b6 b0				or	b  
00b7 87				add	a  
00b8 87				add	a  
00b9 87				add	a  
00ba b1				or	c  
00bb ed 4b 3f 0c		ld	bc,(_ktabl)  
00bf 2a 43 0c			ld	hl,(_ktab)  
00c2 ed b1			cpir  
00c4			  
00c4			; check again for unshifted character  
00c4 28 0b			jr	z,l5  
00c6 2a 43 0c			ld	hl,(_ktab)  
00c9 ed 4b 3f 0c		ld	bc,(_ktabl)  
00cd e6 7f			and	7fh  
00cf ed b1			cpir  
00d1 20 b6		l5:	jr	nz,ksc8  
00d3 ed 4b 43 0c		ld	bc,(_ktab)  
00d7 37				scf  
00d8 ed 42			sbc	hl,bc  
00da ed 4b 41 0c		ld	bc,(_ktab0)  
00de 09				add	hl,bc  
00df 7d				ld	a,l  
00e0 37				scf  
00e1 18 a7			jr	ksc9  
00e3			  
00e3			; set breakpoint address  
00e3 2a 0c 0c		break:	ld	hl,(arg1)  
00e6 22 15 0c			ld	(brkadr),hl  
00e9 c9				ret  
00ea			  
00ea			; table entries represent key number for each ASCII code  
00ea			;	appearing in ASCII order starting at code 1DH  
00ea			;	Each entry is in the format SRRRRCCC  
00ea			;	where S=1 implies that shift key must be down  
00ea			;	RRRR=8-row number (number in counter)  
00ea			;	CCC=column number (bit number)  
00ea			; Setting all ones (0FFH) implies that there is no key  
00ea			;	for this code  
00ea			; If the shift key is down and no code is found  
00ea			;	then the table is searched again if  
00ea			;	the shift key were uo.  
00ea 08 88 09		ktab:	defb	08h,88h,09h  
00ed 14 9c 9b a3 92 c2 ba b2		defb	14h,9ch,9bh,0a3h,92h,0c2h,0bah,0b2h  
00f5 aa a2 98 a0 29 0a 21 19		defb	0aah,0a2h,98h,0a0h,29h,0ah,21h,19h  
00fd 1a 1c 1b 23 12 42 3a 32		defb	1ah,1ch,1bh,23h,12h,42h,3ah,32h  
0105 2a 22 18 20 a9 8a a1 99		defb	2ah,22h,18h,20h,0a9h,8ah,0a1h,99h  
010d 0d 2c 41 13 3b 33 43 10		defb	0dh,2ch,41h,13h,3bh,33h,43h,10h  
0115 40 2d 38 30 28 31 39 25		defb	40h,2dh,38h,30h,28h,31h,39h,25h  
011d 1d 24 15 34 45 35 11 2b		defb	1dh,24h,15h,34h,45h,35h,11h,2bh  
0125 44 3d 3c			defb	44h,3dh,3ch  
0128			  
0128			; reflection initialisation table  
0128 00 10		initt:	defw	1000h  
012a 3e 00			defw	64+3-5  
012c 1d 00			defw	32-3  
012e ea 00			defw	ktab  
0130 63 03			defw	ctab  
0132 c3 05 03			jp	trap  
0135 c3 3b 01			jp	crt  
0138 c3 69 00			jp	kbd  
013b			inite:  
013b			  
013b b7			crt:	or	a  
013c c8				ret	z  
013d f5				push	af  
013e c5				push	bc  
013f d5				push	de  
0140 e5				push	hl  
0141 fe 1e			cp	ff  
0143 20 2f			jr	nz,l6  
0145 21 09 08			ld	hl,crtram+9  
0148 36 ff			ld	(hl),-1  
014a 23				inc	hl  
014b 06 30			ld	b,48  
014d 36 20		l7:	ld	(hl),' '  
014f 23				inc	hl  
0150 10 fb			djnz	l7  
0152 06 10			ld	b,16  
0154 36 00		l8:	ld	(hl),0  
0156 23				inc	hl  
0157 10 fb			djnz	l8  
0159 eb				ex	de,hl  
015a 21 0a 08			ld	hl,crtram+10  
015d 01 b0 03			ld	bc,15*64-16  
0160 ed b0			ldir  
0162 3e ff			ld	a,-1  
0164 32 ba 0b			ld	(crtram+14*64+58),a  
0167 21 8a 0b		crt0:	ld	hl,curlin  
016a 36 5f		crt1:	ld	(hl),cur  
016c 22 18 0c			ld	(cursor),hl  
016f e1				pop	hl  
0170 d1				pop	de  
0171 c1				pop	bc  
0172 f1				pop	af  
0173 c9				ret  
0174			  
0174			  
0174			; remove cursor  
0174 2a 18 0c		l6:	ld	hl,(cursor)  
0177 36 20			ld	(hl),' '  
0179 fe 1d			cp	bs  
017b 20 0b			jr	nz,l9  
017d			  
017d			; backspace (thru margins if necessary)  
017d 2b			l10:	dec	hl  
017e 7e				ld	a,(hl)  
017f b7				or	a  
0180 28 fb			jr	z,l10  
0182 3c				inc	a  
0183 20 e5			jr	nz,crt1  
0185 23				inc	hl  
0186 18 e2			jr	crt1  
0188			  
0188 fe 1f		l9:	cp	cr  
018a 28 09			jr	z,crt3  
018c			  
018c			; put on screen, scroll if necessary  
018c 77				ld	(hl),a  
018d 23			l11:	inc	hl  
018e 7e				ld	a,(hl)  
018f b7				or	a  
0190 28 fb			jr	z,l11  
0192 3c				inc	a  
0193 20 d5			jr	nz,crt1  
0195			  
0195			; scroll  
0195 11 0a 08		crt3:	ld	de,crtram+10  
0198 21 4a 08			ld	hl,crtram+10+64  
019b 01 70 03			ld	bc,14*64-16  
019e ed b0			ldir  
01a0 21 10 00			ld	hl,16  
01a3 19				add	hl,de  
01a4 06 30			ld	b,48  
01a6 36 20		l12:	ld	(hl),' '  
01a8 23				inc	hl  
01a9 10 fb			djnz	l12  
01ab 18 ba			jr	crt0  
01ad			  
01ad			; memory modify, arg1=address  
01ad 2a 0c 0c		modify:	ld	hl,(arg1)  
01b0 cd 32 02		mod1:	call	tbcd3  
01b3 7e				ld	a,(hl)  
01b4 cd 44 02			call	b2hex  
01b7 cd db 01			call	inline  
01ba 11 52 0b			ld	de,line+8  
01bd 06 00			ld	b,0  
01bf			  
01bf			; note that line starts at line+8  
01bf e5			mod2:	push	hl  
01c0 cd 5a 02			call	nexnum  
01c3 7e				ld	a,(hl)  
01c4 b7				or	a  
01c5 28 08			jr	z,mod3  
01c7 23				inc	hl  
01c8 7e				ld	a,(hl)  
01c9 e1				pop	hl  
01ca 77				ld	(hl),a  
01cb 04				inc	b  
01cc 23				inc	hl  
01cd 18 f0			jr	mod2  
01cf			  
01cf e1			mod3:	pop	hl  
01d0 1a				ld	a,(de)  
01d1 fe 2e			cp	'.'  
01d3 c8				ret	z  
01d4 78				ld	a,b  
01d5 b7				or	a  
01d6 20 01			jr	nz,l13  
01d8 23				inc	hl  
01d9 18 d5		l13:	jr	mod1  
01db			  
01db			; print system prompt and read a line  
01db ef			inline:	rst	28h  
01dc .. 00			defb	'>',0  
01de cd 3e 00		inl0:	call	chin  
01e1 fe 1d			cp	bs  
01e3 28 09			jr	z,inl2  
01e5			  
01e5			; return on cr  
01e5 fe 1f			cp	cr  
01e7 28 57			jr	z,crlf  
01e9			  
01e9			; put out char and continue  
01e9 cd 4a 0c		inl1:	call	_crt  
01ec 18 f0			jr	inl0  
01ee			  
01ee			; handle backspace; dont allow backspace over prompt  
01ee ed 5b 18 0c	inl2:	ld	de,(cursor)  
01f2 1b				dec	de  
01f3 1a				ld	a,(de)  
01f4 fe 3e			cp	'>'  
01f6 28 e6			jr	z,inl0  
01f8 3e 1d			ld	a,bs  
01fa 18 ed			jr	inl1  
01fc			  
01fc			; tabulate code, arg1=start addr, arg2=end  
01fc			;	routine is used by dump command  
01fc 2a 0c 0c		tabcde:	ld	hl,(arg1)  
01ff ed 5b 0e 0c	tbcd1:	ld	de,(arg2)  
0203 e5				push	hl  
0204 b7				or	a  
0205 ed 52			sbc	hl,de  
0207 e1				pop	hl  
0208 38 05			jr	c,l14  
020a ef				rst	28h  
020b .. 1f 00			defb	'.',cr,00  
020e c9				ret  
020f 0e 00		l14:	ld	c,0  
0211 cd 32 02			call	tbcd3  
0214 06 08			ld	b,8  
0216 7e			tbcd1a:	ld	a,(hl)  
0217 cd 2b 02			call	tbcd2  
021a 23				inc	hl  
021b cd 3c 02			call	space  
021e 10 f6			djnz	tbcd1a  
0220			; put put checksum and backspace over it so it doesnt show  
0220 79				ld	a,c  
0221 cd 44 02			call	b2hex  
0224 ef				rst	28h  
0225 1d 1d 1f 00		defb	1dh,1dh,1fh,0  
0229 18 d4			jr	tbcd1  
022b f5			tbcd2:	push	af  
022c 81				add	a,c  
022d 4f				ld	c,a  
022e f1				pop	af  
022f c3 44 02			jp	b2hex  
0232 7c			tbcd3:	ld	a,h  
0233 cd 2b 02			call	tbcd2  
0236 7d				ld	a,l  
0237 cd 2b 02			call	tbcd2  
023a 00				nop  
023b 00				nop  
023c			  
023c 3e 20		space:	ld	a,' '  
023e 18 17			jr	jcrt  
0240 3e 1f		crlf:	ld	a,1fh  
0242 18 13			jr	jcrt  
0244			  
0244			; print A in hex  
0244 f5			b2hex:	push	af  
0245 1f				rra  
0246 1f				rra  
0247 1f				rra  
0248 1f				rra  
0249 cd 4d 02			call	b2hex1  
024c f1				pop	af  
024d e6 0f		b2hex1:	and	0fh  
024f c6 30			add	30h  
0251 fe 3a			cp	'9'+1  
0253 38 02			jr	c,jcrt  
0255 c6 07			add	7  
0257 c3 4a 0c		jcrt:	jp	_crt  
025a			  
025a			; read in a hex number, DE being used as pointer to line  
025a			;	NUM+1, NUM+2 contain the number  
025a			;	NUM set non zero if there is a number there at all  
025a 1a			nexnum:	ld	a,(de)  
025b fe 20			cp	' '  
025d 13				inc	de  
025e 28 fa			jr	z,nexnum  
0260 1b				dec	de  
0261 af				xor	a  
0262 21 12 0c			ld	hl,num  
0265 77				ld	(hl),a  
0266 23				inc	hl  
0267 77				ld	(hl),a  
0268 23				inc	hl  
0269 77				ld	(hl),a  
026a 1a			nn1:	ld	a,(de)  
026b 2b				dec	hl  
026c 2b				dec	hl  
026d d6 30			sub	'0'  
026f f8				ret	m  
0270 fe 0a			cp	10  
0272 38 08			jr	c,nn2  
0274 d6 07			sub	7  
0276 fe 0a			cp	10  
0278 f8				ret	m  
0279 fe 10			cp	10h  
027b f0				ret	p  
027c 13			nn2:	inc	de  
027d 34				inc	(hl)  
027e 23				inc	hl  
027f ed 6f			rld  
0281 23				inc	hl  
0282 ed 6f			rld  
0284 18 e4			jr	nn1  
0286			  
0286			; main monitor loop; read a line and obey it  
0286 cd db 01		parse:	call	inline  
0289 11 4b 0b			ld	de,line+1  
028c 01 0a 0c			ld	bc,args  
028f 1a				ld	a,(de)  
0290 fe 20			cp	' '  
0292 20 05			jr	nz,l16  
0294 0a				ld	a,(bc)  
0295 fe 53			cp	'S'  
0297 20 ed			jr	nz,parse  
0299 02			l16:	ld	(bc),a  
029a 03				inc	bc  
029b 13				inc	de  
029c af				xor	a  
029d 02				ld	(bc),a  
029e			; get the arguments  
029e 03			ploop:	inc	bc  
029f cd 5a 02			call	nexnum  
02a2 7e				ld	a,(hl)  
02a3 b7				or	a  
02a4 28 0d			jr	z,pend  
02a6 23				inc	hl  
02a7 7e				ld	a,(hl)  
02a8 02				ld	(bc),a  
02a9 23				inc	hl  
02aa 03				inc	bc  
02ab 7e				ld	a,(hl)  
02ac 02				ld	(bc),a  
02ad 21 0b 0c			ld	hl,args+1  
02b0 34				inc	(hl)  
02b1 18 eb			jr	ploop  
02b3 ed 4b 0a 0c	pend:	ld	bc,(args)  
02b7 21 63 03			ld	hl,ctab  
02ba 7e			pend1:	ld	a,(hl)  
02bb b7				or	a  
02bc ca 60 07			jp	z,eparse  
02bf 23				inc	hl  
02c0 b9				cp	c  
02c1 28 04			jr	z,l17  
02c3 23				inc	hl  
02c4 23				inc	hl  
02c5 18 f3			jr	pend1  
02c7 5e			l17:	ld	e,(hl)  
02c8 23				inc	hl  
02c9 56				ld	d,(hl)  
02ca 21 86 02		l_02ca:	ld	hl,parse  
02cd e5				push	hl  
02ce eb				ex	de,hl  
02cf e9				jp	(hl)  
02d0			  
02d0 3e ff		exec:	ld	a,0ffh  
02d2 32 1a 0c			ld	(conflg),a  
02d5			; common to E and S, config tells which  
02d5			;	set NMI for end of instr  
02d5 21 05 03		exec1:	ld	hl,trap  
02d8 22 48 0c			ld	(_nmi+1),hl  
02db e1				pop	hl  
02dc 3a 0b 0c			ld	a,(args+1)  
02df b7				or	a  
02e0 28 06			jr	z,l18  
02e2 2a 0c 0c			ld	hl,(arg1)  
02e5 22 3b 0c			ld	(_pc),hl  
02e8 c1			l18:	pop	bc  
02e9 d1				pop	de  
02ea f1				pop	af  
02eb f1				pop	af  
02ec 2a 3d 0c			ld	hl,(_sp)  
02ef f9				ld	sp,hl  
02f0 2a 3b 0c			ld	hl,(_pc)  
02f3 e5				push	hl  
02f4 22 37 0c			ld	(_hl),hl  
02f7 f5				push	af  
02f8 3e 08			ld	a,8  
02fa d3 00			out	(0),a  
02fc f1				pop	af  
02fd ed 45			retn  
02ff			  
02ff			; step, if arg supplied then is address  
02ff af			step:	xor	a  
0300 32 1a 0c			ld	(conflg),a  
0303 18 d0			jr	exec1  
0305			  
0305 f5			trap:	push	af  
0306 e5				push	hl  
0307 3a 00 0c			ld	a,(port0)  
030a d3 00			out	(0),a  
030c 3a 1a 0c			ld	a,(conflg)  
030f b7				or	a  
0310 28 13			jr	z,l19  
0312 2a 15 0c			ld	hl,(brkadr)  
0315 7e				ld	a,(hl)  
0316 32 17 0c			ld	(brkval),a  
0319 36 e7			ld	(hl),0e7h	; rst4  
031b af				xor	a  
031c 32 1a 0c			ld	(conflg),a  
031f 00				nop  
0320 00				nop  
0321 e1				pop	hl  
0322 f1				pop	af  
0323 ed 45			retn  
0325 d5			l19:	push	de  
0326 c5				push	bc  
0327 21 00 00			ld	hl,0  
032a 39				add	hl,sp  
032b 11 33 0c			ld	de,stack  
032e 31 33 0c			ld	sp,stack  
0331 01 08 00			ld	bc,8  
0334 ed b0			ldir  
0336 5e				ld	e,(hl)  
0337 23				inc	hl  
0338 56				ld	d,(hl)  
0339 23				inc	hl  
033a 00				nop  
033b ed 53 3b 0c		ld	(_pc),de  
033f 22 3d 0c			ld	(_sp),hl  
0342			  
0342			; print out regs SP PC AF HL DE BC  
0342 21 3f 0c			ld	hl,_sp+2  
0345 06 06			ld	b,6  
0347 2b			regs1:	dec	hl  
0348 7e				ld	a,(hl)  
0349 cd 44 02			call	b2hex  
034c 2b				dec	hl  
034d 7e				ld	a,(hl)  
034e cd 44 02			call	b2hex  
0351 cd 3c 02			call	space  
0354 10 f1			djnz	regs1  
0356 c3 56 07			jp	ereg  
0359 2a 15 0c		strt0:	ld	hl,(brkadr)  
035c 3a 17 0c			ld	a,(brkval)  
035f 77				ld	(hl),a	; restore breakpoint  
0360 c3 86 02			jp	parse  
0363			  
0363			; command table  
0363			;	format: character, address of subroutine  
0363 ..			ctab:	defb	'M'  
0364 ad 01			defw	modify  
0366 ..				defb	'C'  
0367 ef 03			defw	copy  
0369 ..				defb	'E'  
036a d0 02			defw	exec  
036c ..				defb	'S'  
036d ff 02			defw	step  
036f ..				defb	'T'  
0370 fc 01			defw	tabcde  
0372 ..				defb	'B'  
0373 e3 00			defw	break  
0375 ..				defb	'L'  
0376 7c 03			defw	load  
0378 ..				defb	'D'  
0379 d1 03			defw	dump  
037b 00				nop  
037c			  
037c			; load command  
037c cd 51 00		load:	call	motflp  
037f 21 8a 0b		lod1:	ld	hl,curlin  
0382 22 18 0c			ld	(cursor),hl  
0385 cd 3e 00		lod1b:	call	chin  
0388 fe 1d			cp	bs  
038a 28 f9			jr	z,lod1b  
038c fe 1f			cp	cr  
038e 28 05			jr	z,lod1a  
0390 cd 4a 0c			call	_crt  
0393 20 f0			jr	nz,lod1b  
0395 11 8a 0b		lod1a:	ld	de,curlin  
0398 06 08			ld	b,8  
039a 1a				ld	a,(de)  
039b fe 2e			cp	'.'  
039d ca 51 00			jp	z,motflp  
03a0 cd 5a 02			call	nexnum  
03a3 22 13 0c			ld	(num+1),hl  
03a6 7d				ld	a,l  
03a7 84				add	a,h  
03a8 4f				ld	c,a  
03a9 e5				push	hl  
03aa 21 00 08			ld	hl,crtram  
03ad e5				push	hl  
03ae e5			lod2:	push	hl  
03af cd 5a 02			call	nexnum  
03b2 23				inc	hl  
03b3 7e				ld	a,(hl)  
03b4 e1				pop	hl  
03b5 77				ld	(hl),a  
03b6 23				inc	hl  
03b7 81				add	a,c  
03b8 4f				ld	c,a  
03b9 10 f3			djnz	lod2  
03bb cd 5a 02			call	nexnum  
03be 23				inc	hl  
03bf 7e				ld	a,(hl)  
03c0 b9				cp	c  
03c1 e1				pop	hl  
03c2 d1				pop	de  
03c3 20 07			jr	nz,l20  
03c5 01 08 00			ld	bc,8  
03c8 ed b0			ldir  
03ca 18 b3			jr	lod1  
03cc cd 40 02		l20:	call	crlf  
03cf 18 ae			jr	lod1  
03d1			  
03d1			; dump, uses same code as tabulate  
03d1 cd 51 00		dump:	call	motflp  
03d4 06 00			ld	b,0  
03d6 cd 35 00		l21:	call	kdel  
03d9 10 fb			djnz	l21  
03db 2a 4b 0c			ld	hl,(_crt+1)  
03de e5				push	hl  
03df 21 5d 00			ld	hl,slrout  
03e2 22 4b 0c			ld	(_crt+1),hl  
03e5 cd fc 01			call	tabcde  
03e8 e1				pop	hl  
03e9 22 4b 0c			ld	(_crt+1),hl  
03ec c3 51 00			jp	motflp  
03ef			  
03ef			; copy, arguments: from, to, length  
03ef 2a 0c 0c		copy:	ld	hl,(arg1)  
03f2 ed 5b 0e 0c		ld	de,(arg2)  
03f6 ed 4b 10 0c		ld	bc,(arg3)  
03fa ed b0		l_03fa:	ldir			;come here from icopy  
03fc c9				ret  
03fd 00				nop  
03fe 76				halt  
03ff 76				halt  
0400			; ----------------- end of nasbug t2 code, start of 2nd EPROM -----------  
0400			  
0400 cd 51 00		write:	call	motflp  
0403 06 00			ld	b,$00  
0405			  
0405			w2:  
0405 cd 35 00			call	kdel  
0408 10 fb			djnz	w2  
040a 2a 0c 0c			ld	hl,(arg1)  
040d			  
040d			w4:  
040d ed 5b 0e 0c		ld de,(arg2)  
0411 eb				ex de,hl  
0412 37				scf  
0413 ed 52			sbc hl,de  
0415 da 51 00			jp c,motflp  
0418 eb				ex de,hl  
0419 06 04			ld b,$04  
041b			  
041b			w5:  
041b 3e ff			ld a,$ff  
041d cd 5d 00			call slrout  
0420 10 f9			djnz w5  
0422 af				xor a  
0423 ba				cp d  
0424 20 02			jr nz,w6  
0426 43				ld b,e  
0427 04				inc b  
0428			  
0428			w6:  
0428 58				ld e,b  
0429 7d				ld a,l  
042a cd 5d 00			call slrout  
042d 7c				ld a,h  
042e cd 5d 00			call slrout  
0431 7b				ld a,e  
0432 cd 5d 00			call slrout  
0435 7a				ld a,d  
0436 cd 5d 00			call slrout  
0439 0e 00			ld c,$00  
043b cd 5c 04			call tx1  
043e 79				ld a,c  
043f cd 5d 00			call slrout  
0442 cd 40 02			call crlf  
0445 cd cc 06			call sout  
0448 06 04			ld b,$04  
044a 79				ld a,c  
044b			  
044b			w9:  
044b cd 5d 00			call slrout  
044e af				xor a  
044f 10 fa			djnz w9  
0451 18 ba			jr w4  
0453			  
0453			  
0453			msggds:  
0453 1f 42 30 1f 45 30 1f 52 1f		defb $1f,$42,$30,$1f,$45,$30,$1f,$52,$1f  
045c			  
045c			tx1:  
045c cd 5f 04			call tx2  
045f			  
045f			tx2:  
045f cd 32 02			call tbcd3  
0462 eb				ex de,hl  
0463 c9				ret  
0464			  
0464			  
0464				; start of unknown area $0464 to $0465  
0464 00 00			defb $00,$00  
0466				; end of unknown area $0464 to $0465  
0466			  
0466			  
0466			table:  
0466 d5				push de  
0467 5f				ld e,a  
0468			  
0468			tb1:  
0468 7e				ld a,(hl)  
0469 23				inc hl  
046a b7				or a  
046b 28 07			jr z,tb3  
046d bb				cp e  
046e 28 04			jr z,tb3  
0470 23				inc hl  
0471 23				inc hl  
0472 18 f4			jr tb1  
0474			  
0474			  
0474			tb3:  
0474 5e				ld e,(hl)  
0475 23				inc hl  
0476 56				ld d,(hl)  
0477 eb				ex de,hl  
0478 d1				pop de  
0479 c9				ret  
047a			  
047a			  
047a			rnd:  
047a c5				push bc  
047b 47				ld b,a  
047c ed 5f			ld a,r  
047e 86				add a,(hl)  
047f 38 01			jr c,rn2  
0481 3d				dec a  
0482			  
0482			rn2:  
0482 77				ld (hl),a  
0483			  
0483			sub:  
0483 90				sub b  
0484 30 fd			jr nc,sub  
0486 80				add a,b  
0487 3c				inc a  
0488 c1				pop bc  
0489 c9				ret  
048a			  
048a			  
048a			ekey:  
048a 30 0d			jr nc,ke  
048c 21 09 0c			ld hl,kmap+8  
048f fe 40			cp $40  
0491 20 0a			jr nz,k3  
0493 b7				or a  
0494 cb 66			bit 4,(hl)  
0496 28 01			jr z,ke  
0498			  
0498			kn:  
0498 37				scf  
0499			  
0499			ke:  
0499 e1				pop hl  
049a d1				pop de  
049b c1				pop bc  
049c c9				ret  
049d			  
049d			  
049d			k3:  
049d fe 21			cp $21  
049f 38 f7			jr c,kn  
04a1 fe 55			cp $55  
04a3 38 06			jr c,k5  
04a5 cb 66			bit 4,(hl)  
04a7 28 02			jr z,k5  
04a9 c6 06			add a,$06  
04ab			  
04ab			k5:  
04ab cb 6e			bit 5,(hl)  
04ad 28 e9			jr z,kn  
04af c6 20			add a,$20  
04b1 fe 60			cp $60  
04b3 30 e3			jr nc,kn  
04b5 c6 40			add a,$40  
04b7 18 df			jr kn  
04b9			  
04b9			  
04b9			idelay:  
04b9 1b				dec de  
04ba 7a				ld a,d  
04bb b3				or e  
04bc c8				ret z  
04bd cd 4d 0c			call _kbd  
04c0 d8				ret c  
04c1 cd 35 00			call kdel  
04c4 18 f3			jr idelay  
04c6			  
04c6			  
04c6			cda:  
04c6 7e				ld a,(hl)  
04c7 f5				push af  
04c8 cd de 04			call cd14  
04cb cd de 04			call cd14  
04ce f1				pop af  
04cf 77				ld (hl),a  
04d0 23				inc hl  
04d1 10 f3			djnz cda  
04d3 cb 41			bit 0,c  
04d5 c0				ret nz  
04d6 cb 49			bit 1,c  
04d8 c8				ret z  
04d9 1b				dec de  
04da 3e 30			ld a,$30  
04dc 18 11			jr cd18  
04de			  
04de			  
04de			cd14:  
04de af				xor a  
04df ed 6f			rld  
04e1 20 08			jr nz,cd16  
04e3 cb 41			bit 0,c  
04e5 20 04			jr nz,cd16  
04e7 3e 20			ld a,$20  
04e9 18 04			jr cd18  
04eb			  
04eb			  
04eb			cd16:  
04eb cb c1			set 0,c  
04ed c6 30			add a,$30  
04ef			  
04ef			cd18:  
04ef 12				ld (de),a  
04f0 13				inc de  
04f1 c9				ret  
04f2			  
04f2			  
04f2			rdl:  
04f2 c5				push bc  
04f3 e5				push hl  
04f4			  
04f4			dl2:  
04f4 2b				dec hl  
04f5 ed 6f			rld  
04f7 10 fb			djnz dl2  
04f9 e1				pop hl  
04fa c1				pop bc  
04fb c9				ret  
04fc			  
04fc			  
04fc			cad:  
04fc 78				ld a,b  
04fd			  
04fd			ca2:  
04fd 36 00			ld (hl),$00  
04ff 23				inc hl  
0500 10 fb			djnz ca2  
0502 47				ld b,a  
0503 87				add a,a  
0504 4f				ld c,a  
0505			  
0505			ca6:  
0505 1a				ld a,(de)  
0506 13				inc de  
0507 d6 30			sub $30  
0509 d8				ret c  
050a fe 0a			cp $0a  
050c d0				ret nc  
050d cd f2 04			call rdl  
0510 0d				dec c  
0511 20 f2			jr nz,ca6  
0513 c9				ret  
0514			  
0514			  
0514			icopy:  
0514 cd 97 06			call garg  
0517 b7				or a  
0518 ed 52			sbc hl,de  
051a 19				add hl,de  
051b d2 fa 03			jp nc,l_03fa  
051e 0b				dec bc  
051f eb				ex de,hl  
0520 09				add hl,bc  
0521 eb				ex de,hl  
0522 09				add hl,bc  
0523 03				inc bc  
0524 ed b8			lddr  
0526 c9				ret  
0527			  
0527			  
0527			arith:  
0527 cd 9b 06			call garg2  
052a eb				ex de,hl  
052b e5				push hl  
052c 19				add hl,de  
052d cd 32 02			call tbcd3  
0530 e1				pop hl  
0531 b7				or a  
0532 ed 52			sbc hl,de  
0534 cd 32 02			call tbcd3  
0537 2b				dec hl  
0538 2b				dec hl  
0539 7c				ld a,h  
053a fe ff			cp $ff  
053c 20 0a			jr nz,a2  
053e cb 7d			bit 7,l  
0540 20 0d			jr nz,aok  
0542			  
0542			ang:  
0542 ef				rst $28  
0543			  
0543			msgbad:  
0543 3f 3f 1f 00		defb $3f,$3f,$1f,$00  
0547 c9				ret  
0548			  
0548			  
0548			a2:  
0548 b7				or a  
0549 20 f7			jr nz,ang  
054b cb 7d			bit 7,l  
054d 20 f3			jr nz,ang  
054f			  
054f			aok:  
054f 7d				ld a,l  
0550 cd 44 02			call b2hex  
0553 cd 40 02			call crlf  
0556 c9				ret  
0557			  
0557			  
0557			futur1:  
0557 ff ff ff ff ff ff ff ff		defb	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff  
055f ff ff ff ff ff ff ff ff		defb	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff  
0567 ff ff ff ff ff ff ff ff		defb	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff  
056f ff ff ff ff ff ff ff ff		defb	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff  
0577 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff		defb	$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff  
0697			  
0697			; get 3 arguments (or, get 2 arguments)  
0697 ed 4b 10 0c	garg:	ld bc,(arg3)  
069b ed 5b 0e 0c	garg2:	ld de,(arg2)  
069f 2a 0c 0c			ld hl,(arg1)  
06a2 c9				ret  
06a3			  
06a3 21 53 04		g:	ld hl,msggds  
06a6 06 09			ld b,$09  
06a8 cd cc 06			call sout  
06ab cd 00 04			call write  
06ae 3e 45			ld a,$45  
06b0 cd 5d 00			call slrout  
06b3 2a 4b 0c			ld hl,($0c4b)  
06b6 e5				push hl  
06b7 21 5d 00			ld hl,slrout  
06ba 22 4b 0c			ld ($0c4b),hl  
06bd 2a 10 0c			ld hl,(arg3)  
06c0 cd 32 02			call tbcd3  
06c3 e1				pop hl  
06c4 22 4b 0c			ld ($0c4b),hl  
06c7 3e 1f			ld a,$1f  
06c9 c3 5d 00			jp slrout  
06cc			  
06cc 0e 00		sout:	ld c,$00  
06ce			  
06ce 7e			so1:	ld a,(hl)  
06cf 81				add a,c  
06d0 4f				ld c,a  
06d1 7e				ld a,(hl)  
06d2 cd 5d 00			call slrout  
06d5 23				inc hl  
06d6 10 f6			djnz so1  
06d8 c9				ret  
06d9			  
06d9 ed 57		er1:	ld a,i  
06db cd 44 02			call b2hex  
06de cd 3c 02			call space  
06e1 dd e5			push ix  
06e3 e1				pop hl  
06e4 cd 32 02			call tbcd3  
06e7 fd e5			push iy  
06e9 e1				pop hl  
06ea cd 32 02			call tbcd3  
06ed 21 39 0c			ld hl,_af  
06f0 7e				ld a,(hl)  
06f1 11 03 07			ld de,$0703  
06f4 06 08			ld b,$08  
06f6			  
06f6 13			er4:	inc de  
06f7 17				rla  
06f8 f5				push af  
06f9 1a				ld a,(de)  
06fa 38 01			jr c,er6  
06fc af				xor a  
06fd			  
06fd cd 4a 0c		er6:	call _crt  
0700 f1				pop af  
0701 10 f3			djnz er4  
0703 c9				ret  
0704			  
0704			  
0704 53 5a 00 48 00 50 4e 43	msgflg:	defb $53,$5a,$00,$48,$00,$50,$4e,$43  
070c			  
070c cd 51 00		read:	call motflp  
070f			  
070f 06 04		r1:	ld b,$04  
0711			  
0711 cd 3e 00		r2:	call chin  
0714 fe ff			cp $ff  
0716 20 f7			jr nz,r1  
0718 10 f7			djnz r2  
071a cd 3e 00			call chin  
071d 6f				ld l,a  
071e cd 3e 00			call chin  
0721 67				ld h,a  
0722 cd 3e 00			call chin  
0725 5f				ld e,a  
0726 cd 3e 00			call chin  
0729 57				ld d,a  
072a 0e 00			ld c,$00  
072c cd 5c 04			call tx1  
072f cd 3e 00			call chin  
0732 b9				cp c  
0733 20 12			jr nz,r6  
0735 43				ld b,e  
0736 0e 00			ld c,$00  
0738			  
0738 cd 3e 00		r4:	call chin  
073b 77				ld (hl),a  
073c 81				add a,c  
073d 4f				ld c,a  
073e 23				inc hl  
073f 10 f7			djnz r4  
0741 cd 3e 00			call chin  
0744 b9				cp c  
0745 28 05			jr z,r7  
0747			  
0747 ef			r6:	rst $28  
0748			  
0748 45 52 52 00	msgerr:	defb $45,$52,$52,$00  
074c			  
074c cd 40 02		r7:	call crlf  
074f af				xor a  
0750 ba				cp d  
0751 ca 51 00			jp z,motflp  
0754 18 b9			jr r1  
0756			  
0756 cd d9 06		ereg:	call er1  
0759 cd 40 02			call crlf  
075c 00				nop  
075d c3 59 03			jp strt0  
0760			  
0760 79			eparse:	ld a,c  
0761 21 6f 07			ld hl,ectab  
0764 cd 66 04			call table  
0767 b7				or a  
0768 ca 86 02			jp z,parse  
076b eb				ex de,hl  
076c c3 ca 02			jp l_02ca  
076f			  
076f 57 00 04 52 0c 07 49 14 05 41 27 05 48 9a 07 4e a1 07 47 a3 06 00 00 00	ectab:	defb $57,$00,$04,$52,$0c,$07,$49,$14,$05,$41,$27,$05,$48,$9a,$07,$4e,$a1,$07,$47,$a3,$06,$00,$00,$00  
0787			  
0787 ff			futur2:	rst $38  
0788 ff				rst $38  
0789 ff				rst $38  
078a ff				rst $38  
078b ff				rst $38  
078c ff				rst $38  
078d ff				rst $38  
078e ff				rst $38  
078f 00				nop  
0790 ff				rst $38  
0791 ff				rst $38  
0792 ff				rst $38  
0793 ff				rst $38  
0794 ff				rst $38  
0795 ff				rst $38  
0796 ff				rst $38  
0797 00				nop  
0798 ff				rst $38  
0799 ff				rst $38  
079a			  
079a 21 a6 07		h:	ld hl,kex  
079d			  
079d 22 4e 0c		h1:	ld ($0c4e),hl  
07a0 c9				ret  
07a1			  
07a1 21 69 00		n:	ld hl,kbd  
07a4 18 f7			jr h1  
07a6			  
07a6 cd 69 00		kex:	call kbd  
07a9 d0				ret nc  
07aa e5				push hl  
07ab 21 08 0c			ld hl,$0c08  
07ae fe 20			cp $20  
07b0 37				scf  
07b1 28 0b			jr z,kx3  
07b3 cb 66			bit 4,(hl)  
07b5 28 07			jr z,kx3  
07b7 cd 44 02			call b2hex  
07ba cd 3c 02			call space  
07bd b7				or a  
07be			  
07be e1			kx3:	pop hl  
07bf c9				ret  
07c0			  
07c0			  
07c0 d5			mcr:	push de  
07c1 23				inc hl  
07c2 0c				inc c  
07c3 79				ld a,c  
07c4 fe 31			cp $31  
07c6 38 33			jr c,ecm  
07c8 0e 01			ld c,$01  
07ca 11 d0 ff			ld de,$ffd0  
07cd 18 2b			jr ecma  
07cf			  
07cf			  
07cf d5			mcl:	push de  
07d0 2b				dec hl  
07d1 0d				dec c  
07d2 20 27			jr nz,ecm  
07d4 0e 30			ld c,$30  
07d6 11 30 00			ld de,$0030  
07d9 18 1f			jr ecma  
07db			  
07db			  
07db d5			mcd:	push de  
07dc 11 40 00			ld de,$0040  
07df 19				add hl,de  
07e0 04				inc b  
07e1 78				ld a,b  
07e2 fe 10			cp $10  
07e4 38 15			jr c,ecm  
07e6 06 01			ld b,$01  
07e8 11 40 fc			ld de,$fc40  
07eb 18 0d			jr ecma  
07ed			  
07ed			  
07ed d5			mcu:	push de  
07ee 11 c0 ff			ld de,$ffc0  
07f1 19				add hl,de  
07f2 05				dec b  
07f3 20 06			jr nz,ecm  
07f5 06 0f			ld b,$0f  
07f7 11 c0 03			ld de,$03c0  
07fa			  
07fa 19			ecma:	add hl,de  
07fb			  
07fb 7e			ecm:	ld a,(hl)  
07fc d1				pop de  
07fd cb 47			bit 0,a  
07ff c9				ret  
0800			  
0800				org	0c00h  
0c00			ramz:	equ	$  
0c00 00...		port0:	defs	1  
0c01 00...		kmap:	defs	9  
0c0a 00...		args:	defs	2  
0c0c 00...		arg1:	defs	2  
0c0e 00...		arg2:	defs	2  
0c10 00...		arg3:	defs	2  
0c12 00...		num:	defs	3  
0c15			rame:	equ	$  
0c15 00...		brkadr:	defs	2  
0c17 00...		brkval: defs	1  
0c18 00...		cursor: defs	2  
0c1a 00...		conflg: defs	1  
0c1b 00...			defs	18h  
0c33 00...		stack:	defs	2  
0c35 00...			defs	2  
0c37 00...		_hl:	defs	2  
0c39 00...		_af:	defs	2  
0c3b 00...		_pc:	defs	2  
0c3d			initr:  
0c3d 00...		_sp:	defs	2  
0c3f			; reflections  
0c3f 00...		_ktabl: defs	2  
0c41 00...		_ktab0:	defs	2  
0c43 00...		_ktab:	defs	2  
0c45 00...		_ctab:	defs	2  
0c47 00...		_nmi:	defs	3  
0c4a 00...		_crt:	defs	3  
0c4d 00...		_kbd:	defs	3  
# End of file BBUG.asm
0c50
