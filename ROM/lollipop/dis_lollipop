#!/usr/bin/perl
#
# script to use the z80 disassembler to reverse the Lollipop Lady Trainer source.
# Want to discover why it works under NAS-SYS 3 but not NAS-SYS 1

use CPU::Z80::Disassembler;

my $file_name = "lollipop.bin_golden";
my $addr = 0x1000;
my $file = "lollipop_dis.txt";
my $asm_file = "lollipop_dis.asm";


$dis = CPU::Z80::Disassembler->new;
$dis->memory->load_file($file_name, $addr);
$dis->write_dump($file);

# mock up stuff for NAS-SYS RST codes

###########################################
# RST 0 - START

###########################################
# RST 8 - RIN

###########################################
# RST 10 - RCAL
## TODO put the actual code thread in here so that it can be followed.
$dis->set_call(0x10, \&handle_rcal);

# advance return PC past in-line subroutine code
sub handle_rcal {
    my $addr = $_[1];
    $dis->defb($addr);
    return $addr+1;
}

###########################################
# RST 18 - SCAL
$dis->set_call(0x18, \&handle_scal);

# advance return PC past in-line subroutine code
sub handle_scal {
    my $addr = $_[1];
    $dis->defb($addr);
    return $addr+1;
}

###########################################
# RST 20 - BRKPT

###########################################
# RST 28 - PRS
$dis->set_call(0x28, \&handle_prs);

# advance return PC past in-line null-terminated string
sub handle_prs {
    my $ref = $_[0];
    my $addr = $_[1];
    my $start = $addr;
    while ($ref->memory->peek($addr) != 0) {
        ##TODO work out length and use ->defm
        ##TODO ..not that simple: need to detect CR and other non-printers
        $dis->defb($addr);
#        printf("Peek of 0x%04x for prs\n", $addr);
        $addr = $addr + 1;
    }
    # the message and its terminating NULL
    printf("RST PRS message at 0x%04x, length %d\n",$start, $addr - $start +1);
#    $dis->defm($start, $addr - $start);
    $dis->defb($addr);

    # next PC is after NULL
    return $addr+1;
}

###########################################
# RST 30 - ROUT
$dis->set_call(0x30, \&handle_rout);
sub handle_rout {
    my $addr = $_[1];
    return $addr;
}

###########################################
# RST 38 - RDEL
$dis->set_call(0x38, \&handle_rdel);
sub handle_rdel {
    my $addr = $_[1];
    return $addr;
}


###########################################
# NAS-SYS initialisation routine


###########################################
# NAS-SYS entry point
# Never actually come back from here, but
# model it as "ret"


###########################################
# Stuff specific to the code being disassembled

# nas-sys init
##$dis->memory->poke(0x0d,0xc9);


# workspace
#for ($i=0xc000; $i<0xc00f; $i=$i+1) {
#    $dis->memory->poke($i, 0);
#}
#$dis->defw(0xc000, 1, "WORKSP");
#$dis->defb(0xc000, 1, "MDRV");
#$dis->defb(0xc001, 1, "DDRV");
#$dis->defb(0xc002, 1, "DRVCOD");
#$dis->defb(0xc003, 1, "FIRST");
#$dis->defb(0xc004, 1, "ERRFLG");
#$dis->defb(0xc005, 1, "ERRCOD");


##$dis->set_call(0x45, \&handle_xx);

sub handle_xx {
    my $ref = $_[0];
    my $addr = $_[1];
    printf "Unknown entry being called at 0x%04x\n", $addr;
    return $addr;
}

# given a list of addresses, do a $dis->code on each
# of them, with a label of the form X_<addr> where
# <addr> is a 4-digit hex address with leading zeros
sub dis_here {
    while (my $addr = shift @_) {
        my $label = sprintf("X_%04X", $addr);
        $dis->code($addr,$label);
    }
}



##$dis->code(0x000d,"STMON");

$dis->code(0x1000,"START");

$dis->defm(0x12b6,25,"TITLE");
$dis->defm(0x12cf,25,"CONT");
$dis->defm(0x125d,16,"CAR1");
$dis->defm(0x126d,16,"CAR2");
$dis->defm(0x12ad,9,"CAR3");
$dis->defb(0x127d,16,"CAR4");
$dis->defb(0x128d,16,"CAR5");
$dis->defm(0x129d,16,"CAR6");

#dis_here(0x1073);
#dis_here(0x108a);
#dis_here(0x1096);
#dis_here(0x10a2);
dis_here(0x10bb);
#dis_here(0x10c2);
dis_here(0x10ce);
#dis_here(0x10d6);
#dis_here(0x1115);
dis_here(0x1133);
dis_here(0x1140);
dis_here(0x1016);

#$dis->defm(0xc3ca,1,"REGTAB");
#dis->defw(0xc3cb,1);
#$dis->defm(0xc9bf,3,INCM);


# This can optimise code and so it may prevent 100% match
# on re-assembly.
##$dis->analyse;
$dis->write_asm($asm_file);
