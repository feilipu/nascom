#!/usr/bin/perl
#
# https://github.com/nealcrook/nascom
#
# NASCOM file format converter. For usage type:
#
# ./nascon -help
#
# To run on Windows:
# - I recommend strawberry PERL (http://www.strawberryperl.com)
# - you need to name this file nascon.pl
#
# Send kudos/bug reports/suggestions for improvement/patches to the author.
#
# Author: foofoobedoo@gmail.com
# Licence: GPL V2.
#
# Version History
# 27Sep2018 First version; using elements of nas2cas and cas2nas
#
################################################################################

# By inspection BASIC file name header is:
# d3 d3 d3 xx
# where xx is a single ASCII character, A-Z
# followed by 16*16=256 NUL characters

# By inspection, self-loading tape (created using "Generate") is
# 0x0d E0 0x0d R 0x0d
# followed by 16*16=256 NUL characters

# .. or maybe the 256 NUL characters are at the start of a W before the action
# starts.

# TODO
# - detect and report a BASIC header (only for read of CAS file)
# - detect and report an execution address (only for read of CAS file)
# - optionally append a BASIC header (only for write of CAS file - and report
#   warning for a file with the right load address to be a BASIC program)
# - want a batch mode where a whole tapes-worth of .wav can be processed into
#   separate files
# - optionally append an execution address (for write of CAS file) and also
#   prepend E0 R.. check the documentation for the original format of a G file.
# - implement write_as_hex  -- fiddly-ish


use strict;
use warnings;

# records is a data structure that holds one or more regions of byte sequences
# together with other meta-data.
# Regions may or may not
# - be contiguous
# - ovelap
# - be in order
# However, all well-behaved .nas and .cas files will not have any nasty characteristics
# and so this program will check and may simply reject any badly-behaved data sets.
#
# $records[0]->{addr};          -- start address
# $records[0]->{next_addr};     -- for convenience: addr+len
# $records[0]->{len};           -- number of bytes
# $records[0]->{data};          -- byte stream
# $records[0]->{go};            -- execution address (ONLY in entry [0])
# $records[0]->{src_line};      -- line number of input associated with start
#                                  of record; for debug only
my @records;

my %args;
$args{infile} = undef;
$args{outfile} = undef;
$args{-in} = undef;
$args{-out} = undef;
$args{-org} = undef;
$args{-csum} = 0;
$args{-pad8} = 0;
$args{-pad256} = 0;
# these arguments are flags, the others supply a value
my %flags = ( -csum => 1, -pad8 => 1, -pad256 => 1);


################################################################################
# process command-line
while (my $arg = shift @ARGV) {
    if ($arg =~ /^-/) {
        help_exit() if (($arg eq '-h') or ($arg eq '-help'));
        if (exists ($args{$arg})) {
            if (exists ($flags{$arg})) {
                $args{$arg} = 1;
            }
            else {
                $args{$arg} = lc(shift @ARGV);
            }
        }
        else {
            die "ERROR: Unrecognised argument: $arg (try -help)\n";
        }
    }
    elsif (not defined $args{infile}) {
        $args{infile} = $arg;
    }
    elsif (not defined $args{outfile}) {
        $args{outfile} = $arg;
    }
    else {
        die "ERROR: Bad command-line format: $arg\n";
    }
}

if (not defined $args{infile}) {
    help_exit();
}

if (not defined $args{outfile}) {
    die "ERROR: no output file specified\n";
}


################################################################################
# deduce input and output formats from file extension if not set explicitly
if (not defined $args{-in}) {
    my @bits = split /\./, $args{infile};
    $args{-in} = lc $bits[-1];
}
if (not defined $args{-out}) {
    my @bits = split /\./, $args{outfile};
    $args{-out} = lc $bits[-1];
}

################################################################################
# make sure everything is legal:
# -in/-out formats known and recognised
# in file exists and can be opened
# out file can be opened
# -org specified where required

if ($args{-in} !~ /^(bin|cas|nas|hex|dmp)$/) {
    die "ERROR input format $args{-in} is not recognised/supported\n";
}
if ($args{-out} !~ /^(bin|cas|nas|hex|dmp|dbg|js)$/) {
    die "ERROR output format $args{-out} is not recognised/supported\n";
}

open IN,    $args{infile}   or die "ERROR could not open $args{infile} for input\n";
open OUT, ">$args{outfile}" or die "ERROR could not open $args{outfile} for output\n";

if ($args{-in} eq 'bin') {
    if (defined $args{-org}) {
        # check it's legal
        if ($args{-org} =~ /^[0-9a-f]+$/) {
            $args{-org} = hex($args{-org});
        }
        else {
            die "ERROR expected a hexadecimal number but got $args{-org}\n";
        }
    }
    else {
        die "ERROR when input file is in bin format you must specify -org\n";
    }
}


################################################################################
# Input: process input file to internal record format
no strict 'refs';
my $sub = "read_as_$args{-in}";
&$sub();

################################################################################
# Report checksum formed by summing all the bytes. Usually only the low byte of
# the checksum is considered but I report the whole sum because my checksum
# utility reports a 16-bit value allowing you to take heed of the low byte only
# or of both bytes as you please.
my $sum = 0;
foreach my $rec_ref (@records) {
    foreach my $x (0..$rec_ref->{len}-1) {
        my $chr = ord(substr $rec_ref->{data}, $x, 1);
        $sum = $sum + $chr;
    }
}
printf "Sum of all input data bytes (usually a checkum would be the low 8 bits of this): 0x%04x\n", $sum;


################################################################################
# Pad file size (if required) by adding bytes of 0 to the last record
my $total_bytes = 0;
foreach my $rec_ref (@records) {
    $total_bytes += $rec_ref->{len};
}
if ($args{-pad256} && ($total_bytes % 256 != 0)) {
    pad(256 - ($total_bytes % 256));
}
elsif ($args{-pad8} && ($total_bytes % 8 != 0)) {
    pad(8 - ($total_bytes % 8));
}

################################################################################
# Output: process internal record format to generate output file
$sub = "write_as_$args{-out}";
&$sub();

################################################################################
# Finished.
close IN;
close OUT;
exit 0;


################################################################################
################################################################################
# subroutines
################################################################################
################################################################################

################################################################################
sub help_exit {
    print <<'EOF';

nascon converts files between different formats, especially NASCOM formats. The
following formats are supported:

nas       - format used by NAS-SYS T command and NAS-SYS 1 L command.
cas       - binary (not audio) format used by NAS-SYS W and R commands.
bin       - raw binary format.
hex       - Intel HEX format.
dmp       - dump format: address, 16-bytes hex, 16-bytes ASCII per line
dbg       - (output only) human-readable dump of the internal data structure
js        - (output only) Javascript text string

Usage:

        nascon <infile> <outfile> [-arg1 val1 -arg2 val2..]

Examples:
        nascon invader.cas invader.nas
        nascon invader.cas invader.bin
        nascon invader.bin invader.cas -org 1C00
        nascon -out bin invader.a   invader.b -in cas

Arguments:

<infile> <outfile> -- the input and output file-names respectively. The input file
must exist. The output file will be created, over-writing any existing file of the
same name. The <infile> and <outfile> can appear before or after any arguments.

-in -- input file format. If not specified, will be guessed from the <infile> extension.

-out -- output file format. If not specified, will be guessed from the <outfile> extension.

Legal values for -in and -out are: cas nas bin hex dmp. Additional legal value for -out is dbg.
Case is ignored so that HEX hex Hex etc. are all considered to be equivalent.

-org -- when the input file is binary (bin) there is no addressing information contained
in the file. The -org argument is required in this case and specifies the address associated
with the first data byte.

-csum -- when the output file is .nas adds a 9th byte to each line which is the
checksum, and ends the line with 08 08 0D 0A (^H ^H CR LF) like NAS-SYS 1.

-pad8 -- round up the file size to a multiple of 8 bytes by adding bytes
of 0 to the last record.

-pad256 -- round up the file size to a multiple of 256 bytes by adding bytes
of 0 to the last record.

Legal value for -org is a hexadecimal number (a sequence of hex digits with with no prefix)

EOF
exit 0;
}


################################################################################
# Pad last record by adding $count bytes of zero.
sub pad {
    my $count = $_[0];
    my $rec_ref = $records[-1]; # last record
    my $padding = chr(0) x $count;
    $rec_ref->{data} = $rec_ref->{data} . $padding;
    $rec_ref->{len} += $count;
}


################################################################################
# Read the .cas file and represent it as one or more entries in @records
# - a well-formed .cas file will be contiguous and therefore a SINGLE entry.
sub read_as_cas {
    my $current_blknum; # undefined

    while (find_cas_blk_preamble()) {
        $current_blknum = process_cas_blk($current_blknum);
    }

    if ($current_blknum != 0) {
        print "ERROR cas file finished at block $current_blknum - expected it to finish at block 0\n";
    }
}


################################################################################
# Helpers for read_as_cas


# Error when reading block header/data/footer
sub err_blk {
    my $msg = $_[0];
    printf "ERROR reached end of file while trying to read $msg\n";
}


# get a byte from IN. Usage: $byte = get_byte(\&sub , $string)
# if no byte available execute &sub($string)
sub get_byte {
    my $on_error = $_[0];
    my $on_error_arg = $_[1];

    my $byte;
    my $ok = read IN, $byte, 1;
    if ($ok == 1) {
        return ord $byte;
    }
    else {
        &$on_error($on_error_arg);
    }
}




# Discard bytes from input until the sequence "00 ff ff ff ff" is found. Return
# when found or exit if end of file reached. On return, the next byte to be read
# is the first byte after the sequence.
sub find_cas_blk_preamble {
    my $count = 0;
    my $byte;
  BYTE:
    while (read IN, $byte, 1) {
        $byte = ord $byte;

        # looking for 0xff
        if ($byte == 0) {
            $count = 1;
            next BYTE;
        }
        # looking for 0xff
        if ($byte == 0xff) {
            $count = $count + 1;
            if ($count == 5) {
                return 1;
            }
            next BYTE;
        }
        $count = 0;
  }
    return 0;
}


# next byte from IN is start of block. Read block header, verify header
# checksum and block number. Read block body, output equivalent
# data to OUT and verify block body checksum.
sub process_cas_blk {
    my $current_blknum = $_[0];

    # read 5-byte block header:
    # 2 bytes start address
    # 1 byte  block length
    # 1 byte  block number
    # 1 byte  header checksum
    # The checksum is the low 8-bits of the sum of the other 4 bytes (NOT, as
    # would be usual, a value that makes the 5 bytes sum to 0)
    print "Look for block header..\n";
    my $blkaddr = get_byte(\&err_blk, "block address") + (get_byte(\&err_blk, "block address") << 8);
    my $blklen = get_byte(\&err_blk, "block length");
    my $blknum = get_byte(\&err_blk, "block number");
    my $blkcsum = get_byte(\&err_blk, "block header checksum");

    # Verify checksum
    my $sum = 0xff & (($blkaddr & 0xff) + ($blkaddr >>8) + $blklen + $blknum);
    if ($sum != $blkcsum) {
        printf "ERROR bad header checksum in block $blknum - calculated 0x%X but read 0x%X\n", $sum, $blkcsum;
    }

    if ((!defined $current_blknum) or ($blkaddr != $records[-1]->{next_addr})) {
        # This block line is the start of a new record (maybe because it's the first).
        # Create an empty record ready to accept the data payload
        my %record;
        my $rec = \%record;
        $rec->{src_line} = 1;
        push @records, $rec;
        $rec->{addr} = $blkaddr;
        $rec->{next_addr} = $blkaddr;
        $rec->{len} = 0;
        $rec->{data} = "";
    }

    my $rec = $records[-1];

    # Verify block number. Block number is an 8-bit value that counts down to 0; the cassette
    # read command terminates after block 0 has been processed.
    # Skip check for 1st block, because block number is unknown.
    if (defined $current_blknum) {
        if ($current_blknum == 0) {
            print "ERROR found block after block 0; block 0 should be the last block\n";
            # but carry on.. it would need a second R command to get the rest
            $current_blknum = $blknum;
        }
        else {
            $current_blknum = $current_blknum - 1;
        }

        if ($blknum != $current_blknum) {
            printf "ERROR bad header block number in block $blknum -- expected 0x%X but read 0x%X\n", $current_blknum, $blknum;
        }
    }

    $current_blknum = $blknum;

    # Fix up byte count
    $blklen = 256 if ($blklen == 0);

    printf "Found blk %d (0x%X bytes at address 0x%04X)\n", $blknum, $blklen, $blkaddr;

    # Update the record for this new data
    $rec->{len} += $blklen;
    $rec->{next_addr} += $blklen;
    $sum = 0;

    # Read block body and store it, accumulating checksum at the same time.
    for (my $i=0; $i<$blklen; $i=$i+1) {
        my $byte = get_byte(\&err_blk, "block data");
        $sum = 0xff & ($sum + $byte);
        $rec->{data} = $rec->{data} . chr($byte);
    }

    # Read block footer:
    # 1 byte  data checksum
    my $fsum = get_byte(\&err_blk, "block data checksum");

    if ($sum != $fsum) {
        printf "ERROR bad data checksum in block $blknum -- calculated 0x%02X but read 0x%02X\n",$sum, $fsum;
    }

    return $current_blknum;
}


################################################################################
# Read the .nas file and represent it as one or more entries in @records
sub read_as_nas {
    my $in_record = 0;  # state

    while (my $line = <IN>) {
        # By inspection of various .NAS files..
        # - line endings are inconsistent. Get rid of both CR and LF
        # - some have nulls before the line-end. Get rid of them.
        # - some have 0x08 before the line-end. Get rid of them.
        $line =~ s/[\n\r\x00\x08]//g;

        # Last line should be "." to indicate exit from the L command. Skip it.
        next if $line =~ /^\.$/;

        # TODO is there sometimes a "E" line? If so, extract the execution address.

        # skip blank lines (there should not be any)
        next if $line =~ /^\s*$/;

        # Lines look like this:
        # 1000 3E AA 32 EA 12 AF 32 EC F3
        #
        # Must be an address and at least 1 data byte. If there are
        # 9 bytes, the last one is a checksum of the address/data
        my @bits = split " ", $line;
        my $count = scalar(@bits) - 1;
        my $addr = hex($bits[0]);

        if ($count == 0) {
            print "ERROR bad format at line $. -- address field but no data\n";
            next;
        }
        if ($count == 9) {
            # Verify checksum then discard it by bumping $count
            my $asum = $addr + ($addr >> 8);
            my $esum = hex($bits[9]); # actual
            for (my $i=1; $i<9; $i=$i+1) {
                $asum = ($asum + hex($bits[$i])) & 0xff;
            }
            if ($asum != $esum ) {
                # report the error but use the data anyway.
                printf "ERROR bad checksum at line $. -- calculated 0x%X but read 0x%X\n", $asum, $esum;
            }
            $count = $count - 1;
        }

        if (($in_record == 0) or ($addr != $records[-1]->{next_addr})) {
            # This line is the start of a new record. Create an empty record which looks
            # contiguous so that the data gets filled in by the next if () below.
            $in_record = 1;
            my %record;
            my $rec = \%record;

            $rec->{addr} = $addr;
            $rec->{len} = 0;
            $rec->{next_addr} = $addr;
            $rec->{data} = "";
            $rec->{src_line} = $.;
            push @records, $rec;
        }

        if ($in_record == 1) {
            # incorporate this line in current record
            my $rec = $records[-1];

            $rec->{len} = $rec->{len} + $count;
            $rec->{next_addr} = $rec->{addr} + $rec->{len};

            for (my $i=1; $i<($count + 1); $i=$i+1) {
                my $byte = hex($bits[$i]);
                $rec->{data} = $rec->{data} . chr($byte);
            }
        }
    }
}


################################################################################
# Read the Intel HEX file and represent it as one or more entries in @records
# Only type 0 (Data) and type 1 (End of file) markers are processed. Report a
# bug if you have a convincing reason for support of any others. A warning will
# be generated if the file does not end with a type 1 record.
sub read_as_hex {
    my $in_record = 0; # state

    while (my $line = <IN>) {
        $line =~/(\:)([0-9A-F][0-9A-F])([0-9A-F][0-9A-F][0-9A-F][0-9A-F])([0-9A-F][0-9A-F])(\w+)/;
        my $count = hex($2);
        my $addr  = hex($3);
        my $typ   = hex($4);
        my $dat   = $5; # data and checksum
        my $sum = $count + ($addr>>8) + ($addr & 0xff) + $typ;

        # support Extended Segment Address (type 2) provided that the 16-bit data field is 0
        if ($typ == 2) {
            die "Unsupported type 2 record at line $. - unexpected length:\n$line" if ($count != 2);
            die "Unsupported type 2 record at line $. - unsupported value:\n$line" if ($dat ne "0000FC");
            next; # it's a nop
        }

        # support Start Segment Address (type 3) provided that the length is 0
        if ($typ == 3) {
            die "Unsupported type 3 record at line $. - unexpected length:\n$line" if ($count != 0);
            die "Unsupported type 3 record at line $. - unsupported value:\n$line" if ($dat ne "FD");
            next; # it's a nop
        }

        # support Extended Linear Address (type 4) provided that the 16-bit data field is 0
        if ($typ == 4) {
            die "Unsupported type 4 record at line $. - unexpected length:\n$line" if ($count != 2);
            die "Unsupported type 4 record at line $. - unsupported value:\n$line" if ($dat ne "0000FA");
            next; # it's a nop
        }

        # ignore type 5 (entry point)
        if ($typ == 5) {
            next; # it's a nop
        }

        # if it's type 1 (end-of-file) we're done
        if ($typ == 1) {
            return;
        }

        # either it's a data record or we don't support it
        if ($typ != 0) {
            die "Unsupported record: type $typ at line $. :\n$line";
        }

        if (($in_record == 0) or ($addr != $records[-1]->{next_addr})) {
            # This line is the start of a new record. Create an empty record which looks
            # contiguous so that the data gets filled in by the next if () below.
            $in_record = 1;
            my %record;
            my $rec = \%record;

            $rec->{addr} = $addr;
            $rec->{len} = 0;
            $rec->{next_addr} = $addr;
            $rec->{data} = "";
            $rec->{src_line} = $.;
            push @records, $rec;
        }

        if ($in_record == 1) {
            # incorporate this line in current record
            my $rec = $records[-1];

            $rec->{len} = $rec->{len} + $count;
            $rec->{next_addr} = $rec->{addr} + $rec->{len};

            # process $count bytes of data from $dat.
            for (my $i=0; $i<$count; $i++) {
                my $byte = hex(substr $dat, 2*$i, 2);
                $sum = $sum + $byte;
                $rec->{data} = $rec->{data} . chr($byte);
            }

            # checksum
            $sum = $sum + hex(substr $dat, 2*$count, 2);

            if (($sum & 0xff) != 0) {
                print "ERROR bad checksum in input file at line $.\n";
            }
        }
    }
    print "WARNING reached end of .hex file with no end-of-file record\n";
}


################################################################################
# Read as binary file. By definition, the file is contiguous.
sub read_as_bin {
    my %record;
    my $rec = \%record;
    push @records, $rec;

    $rec->{addr} = $args{-org}; # already checked that this exists
    $rec->{src_line} = 1;
    {
        # slurp
        local $/=undef;
        $rec->{data} = <IN>;
    }
    $rec->{len} = length $rec->{data};
}


################################################################################
# Read as dump. Accept either of these two formats:
# 000001d0: cd 67 10 d9 21 aa 0b d9 - c9 e5 3e 20 23 be 20 1a   .g..!... ..> #. .
# 0002ac60  48 10 08 42 08 49 24 84  84 09 00 20 10 42 02 12  |H..B.I$.... .B..|
#
# And remember that a line (particularly the last line) may be incomplete.
sub read_as_dmp {
    my $in_record = 0;  # state

    while (my $line = <IN>) {
        my @bits;
        # Get rid of : and - and any line endings or other weird stuff
        $line =~ s/[\-\:\n\r\x00\x08]//g;

        # skip blank lines (there should not be any)
        next if $line =~ /^\s*$/;

        if ($line eq '*') {
            # Indicates discontinuity
            die "ERROR discontinuity in input data at line $. (use -v option to hexdump)\n";
        }

        if ($line =~ /|$/) {
            # for 2nd format, ASCII is separated by | - get rid of it
            # the $ anchor avoids the case where | occurs in the ASCII field
            @bits = split /\|/, $line;
        }
        elsif ($line =~ /   /) {
            # for 1st format, ASCII is separated by 3 spaces - get rid of it
            @bits = split /   /, $line;
        }

        # break into lumps of hex. Must be an address and between 1 and 16 data bytes.
        @bits = split ' ', $bits[0];

        my $count = scalar(@bits) - 1;
        my $addr = hex($bits[0]);

        if ($count == 0) {
            print "ERROR bad format at line $. -- address field but no data\n";
            next;
        }

        if (($in_record == 0) or ($addr != $records[-1]->{next_addr})) {
            # This line is the start of a new record. Create an empty record which looks
            # contiguous so that the data gets filled in by the next if () below.
            $in_record = 1;
            my %record;
            my $rec = \%record;

            $rec->{addr} = $addr;
            $rec->{len} = 0;
            $rec->{next_addr} = $addr;
            $rec->{data} = "";
            $rec->{src_line} = $.;
            push @records, $rec;
        }

        if ($in_record == 1) {
            # incorporate this line in current record
            my $rec = $records[-1];

            $rec->{len} = $rec->{len} + $count;
            $rec->{next_addr} = $rec->{addr} + $rec->{len};

            for (my $i=1; $i<($count + 1); $i=$i+1) {
                my $byte = hex($bits[$i]);
                $rec->{data} = $rec->{data} . chr($byte);
            }
        }
    }
}


################################################################################
# Write @records in .cas format with initial and inter-block padding.
sub write_as_cas {
    if ($#records > 0) {
        die "ERROR cannot write cas file with discontinuous records; use -dbg to examine input file\n";
    }

    my $addr = $records[0]->{addr};
    my $len =  $records[0]->{len};
    my $maxblk = int(($len+255)/256) - 1; # blocks go maxblk..0

    foreach my $i (0..$maxblk) {
        printf "Address $addr length $len -- block %d\n", $maxblk - $i;
        # Output sync pattern
        print OUT chr(0) . chr(0xff) . chr(0xff) . chr(0xff) . chr(0xff);

        # Output block header and checksum
        my $csum = ($addr & 0xff) + ($addr >> 8) + $maxblk - $i;
        my $body;
        print OUT chr($addr & 0xff);
        print OUT chr($addr >> 8);
        if ($len > 255) {
            $body = substr($records[0]->{data}, 256*$i, 256);
            print OUT chr(0);
        }
        else {
            $body = substr($records[0]->{data}, 256*$i);
            print OUT chr($len);
            $csum = $csum + $len;
        }
        print OUT chr($maxblk - $i);
        print OUT chr($csum & 0xff); # header checksum
        print OUT $body;

        $csum = 0;
        foreach my $byte (0..(length($body) -1)) {
            $csum = $csum + ord(substr($body, $byte, 1));
        }
        print OUT chr($csum & 0xff); # body checksum

        # Output 10 nulls
        print OUT chr(0) x 10;

        # Step to next
        $addr = $addr + 256;
        $len = $len - 256;
    }
}


################################################################################
# Write @records as a .nas file
# Easy - don't need to care about the order or any duplication or holes, just
# spit out each region in turn in the correct format.
# TODO support optional "E" option.
sub write_as_nas {
    foreach my $rec_ref (@records) {
        my $csum;
        my $count = 0;
        my $addr = $rec_ref->{addr};
        foreach my $x (0..$rec_ref->{len}-1) {
            if ($count == 0) {
                printf OUT "%04X", $addr;
                $csum = ($addr & 0xff) + ($addr >> 8);
            }

            my $byte = ord(substr $rec_ref->{data}, $x, 1);
            printf OUT " %02X", $byte;
            $csum = $csum + $byte;
            $count = $count + 1;
            $addr = $addr + 1;

            if ($count == 8) {
                if ($args{-csum}) {
                    printf OUT " %02X%c%c", 0xff & $csum, 8, 8;
                }
                print OUT "\r\n";
                $count = 0;
            }
        }
        # runt
        if ($count != 0) {
            printf OUT "\r\n";
        }
    }
    print OUT ".\r\n"; # exit the L command in NAS-SYS
}


################################################################################
# TODO
sub write_as_hex {
    print "Write as hex\n";
}


################################################################################
# Write @records as chunk of binary.
sub write_as_bin {
    if ($#records > 0) {
        die "ERROR cannot write bin file with discontinuous records; use -dbg to examine input file\n";
    }
    print OUT $records[0]->{data};
}


################################################################################
# Write @records in dump format with per-record header, for debug
sub write_as_dbg {
    foreach my $i (0..$#records) {
        if ($i > 0) {
            print OUT "\n";
        }
        printf OUT "Record %d, Start at line %d address=0x%04x length=0x%04x execution address=",
            $i, $records[$i]->{src_line}, $records[$i]->{addr}, $records[$i]->{len};
        if (defined $records[$i]->{go}) {
            printf OUT "0x%04x (explicit)\n", $records[$i]->{go};
        }
        else {
            print OUT "Unknown\n";
        }
        dmp_common($records[$i]);
    }
}


################################################################################
# Write @records as a javascript string
# It would be much simpler to do it as hex escapes but I used octal escapes
# to match the format used by the ROMs in jsnascom. The basic nastiness in
# Javascript octal escapes is that \123 can be followed by a literal
# digit, so can \023 but \12 cannot, because the literal digit would get
# confused with the 3rd digit of the escaped value.
sub write_as_js {
    print OUT "var rom_monitor = \"";
    if ($#records > 0) {
        die "ERROR cannot write bin file with discontinuous records; use -dbg to examine input file\n";
    }
    my $merge_danger=0;
    my $numeric=0;
    foreach my $x (0..$records[0]->{len}-1) {
        my $chr = ord(substr $records[0]->{data}, $x, 1);
        $numeric = ($chr >= 48) && ($chr <= 57);
        if (($merge_danger and $numeric) or ($chr == 92) or ($chr == 34) or ($chr < 32) or ($chr > 126)) {
            printf OUT "\\%o",$chr;
            $merge_danger = ($chr < 7*8+7); # if 2 digits next position can merge with it
        }
        else {
            print OUT chr($chr);
            $merge_danger = 0;
        }
    }
    print OUT "\"\;";
}


################################################################################
# Write @records in dump format
sub write_as_dmp {
    foreach my $rec_ref (@records) {
        dmp_common($rec_ref);
    }
}


################################################################################
# Write one record in "canonical dump format" thus:
# 000002b0: 55 4c 41 4e 43 45 2a 20 - 4c 4f 4c 4c 59 50 4f 50   ULANCE*  LOLLYPOP
# used by write_as_dmp and write_as_dbg
sub dmp_common {
    my $rec_ref = $_[0];

    my $num_str = '';
    my $let_str = '';
    my $count = 0;
    my $addr = $rec_ref->{addr};
    foreach my $x (0..$rec_ref->{len}-1) {
        my $chr = ord(substr $rec_ref->{data}, $x, 1);
        $num_str = $num_str . ' ' . sprintf("%02x",$chr);

        if (($chr < 0x7F) and ($chr > 0x1f)) {
            $let_str = $let_str . chr $chr;
        }
        else {
            $let_str = $let_str . '.';
        }
        $count = $count + 1;

        if ($count == 8) {
            $num_str = $num_str . ' -';
            $let_str = $let_str . ' ';
        }

        if ($count == 16) {
            printf OUT "%08x:%s   %s\n", $addr, $num_str, $let_str;
            $count = 0;
            $num_str = '';
            $let_str = '';
            $addr = $addr + 16;
        }
    }
    # runt
    if ($count != 0) {
        my $pad = '   ' x (16 - $count);
        if ($count < 8) {
            $pad = $pad . '  ';
        }
        printf OUT "%08x:%s $pad  %s\n", $addr, $num_str, $let_str;
    }
}
